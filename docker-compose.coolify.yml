# This is supposed to be used for deployment on coolify

services:
  # This service runs the backend app in the port 3170
  hoppscotch-backend:
    container_name: hoppscotch-backend
    build:
      dockerfile: prod.Dockerfile
      context: .
      target: backend
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://${HOPPSCOTCH_POSTGRES_USER}:${HOPPSCOTCH_POSTGRES_PASSWORD}@hoppscotch-db:5432/${HOPPSCOTCH_POSTGRES_DB}
    restart: always
    volumes:
      # Uncomment the line below when modifying code. Only applicable when using the "dev" target.
      # - ./packages/hoppscotch-backend/:/usr/src/app
      - /usr/src/app/node_modules/
    depends_on:
      hoppscotch-db:
        condition: service_healthy
    # ports:
    #   - "3180:80"
    #   - "3170:3170"

  # The main hoppscotch app. This will be hosted at port 3000
  # NOTE: To do TLS or play around with how the app is hosted, you can look into the Caddyfile for
  #       the SH admin dashboard server at packages/hoppscotch-selfhost-web/Caddyfile
  hoppscotch-app:
    container_name: hoppscotch-app
    build:
      dockerfile: prod.Dockerfile
      context: .
      target: app
    env_file:
      - ./.env
    depends_on:
      - hoppscotch-backend
    # ports:
    #   - "3080:80"
    #   - "3000:3000"

  # The Self Host dashboard for managing the app. This will be hosted at port 3100
  # NOTE: To do TLS or play around with how the app is hosted, you can look into the Caddyfile for
  #       the SH admin dashboard server at packages/hoppscotch-sh-admin/Caddyfile
  hoppscotch-sh-admin:
    container_name: hoppscotch-sh-admin
    build:
      dockerfile: prod.Dockerfile
      context: .
      target: sh_admin
    env_file:
      - ./.env
    depends_on:
      - hoppscotch-backend
    # ports:
    #   - "3280:80"
    #   - "3100:3100"

  # The preset DB service, you can delete/comment the below lines if
  # you are using an external postgres instance
  # This will be exposed at port 5432
  hoppscotch-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${HOPPSCOTCH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${HOPPSCOTCH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${HOPPSCOTCH_POSTGRES_DB}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
